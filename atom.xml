<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yet Another Android Blog]]></title>
  <link href="http://oleksandr-yefremov.github.io/atom.xml" rel="self"/>
  <link href="http://oleksandr-yefremov.github.io/"/>
  <updated>2014-10-08T19:38:14+03:00</updated>
  <id>http://oleksandr-yefremov.github.io/</id>
  <author>
    <name><![CDATA[Oleksandr Yefremov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Throttling bandwidth for Android app on physical device (not only http).]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/10/08/Throttling-bandwidth-on-Android-device/"/>
    <updated>2014-10-08T14:41:15+03:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/10/08/Throttling-bandwidth-on-Android-device</id>
    <content type="html"><![CDATA[<p>The other day I needed to throttle (limit bandwidth) of video streaming application on Android for testing purposes. iPhone has this feature built in since iOS6.</p>

<!-- more -->

<p>As I use Mac OS, I will list instructions for it. Options that I considered:</p>

<p><strong>1. Use <code>emulator -netspeed gsm</code></strong><br>
    I need to be able to do the same thing on real device as well, so strike off.</p>

<p><strong>2. Root phone, install or hack your own <a href="https://play.google.com/store/apps/details?id=com.oxplot.bradybound&amp;hl=en">application</a> which will limit bandwidth (or play with <a href="http://stackoverflow.com/questions/4658619/how-to-use-iptables-in-an-android-application">iptables</a>)</strong><br>
    Not an option, cause I need clean stock firmware on device</p>

<p><strong>3. Throttle bandwidth on WiFi router, if it supports such a feature.</strong><br>
    And everybody connected to the same router will suffer. Besides, with some models you&#39;d need to restart router every time you want to turn on/off throttling.</p>

<p><strong>3. If you have laptop (or PC with WiFi interface), connect to network via Ethernet, setup Internet Sharing from Ethernet to WiFi, connect device to laptop and use <a href="http://nshipster.com/network-link-conditioner/">Network Link Conditioner</a> on Mac or similar software which is easy and straightforward but can only limit all connections together.</strong><br>
    This is the easiest way, if you don&#39;t mind all your connections on both laptop and smartphone slowed down. NLC also able to simulate packet drops and latency.</p>

<p><strong>4. Charles proxy</strong><br>
Lets you throttle specific host accessed with http(s). You can also set breakpoints on everything.
Keep in mind that free version shows &quot;waiting popups&quot; occasionally and restarts every 30 minutes.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/Charles proxy throttling.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/Charles proxy throttling.png" width="267" height="250 " /></a></p>

<p><strong>5. IceFloor or managing system firewall</strong><br>
&quot;<a href="http://www.hanynet.com/icefloor/">IceFloor</a> is a graphic frontend for <a href="http://en.wikipedia.org/wiki/PF_%28firewall%29">PF</a>&quot;.</p>

<p>First we go through step 3 above: connect Ethernet, turn on Internet Sharing, connect our device to laptop. Make sure it works, browse some page or stream video from your app. 
In IceFloor navigate to <strong>Interfaces</strong> tab, click <code>Update</code> button and locate Ethernet and bridge interfaces. In my case it was <code>en0</code>, <code>bridge100</code>.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Interfaces.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Interfaces.png" width="374" height="214 " /></a></p>

<p>Now to <strong>NAT</strong> tab, check &quot;Share internet connection&quot; and select interfaces that you located on previous screen.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor NAT.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor NAT.png" width="374" height="214 " /></a></p>

<p>Last step, <strong>Firewall</strong> tab, select &quot;Outbound (NAT clients)&quot; list, add required protocols to &quot;Services in selected Address Group&quot; (I just added &quot;All services&quot;). And here is the thing we&#39;ve been chasing - Max. Bandwidth. Note, that we can&#39;t specify packet drop rate or latency here. If you need those as well as bandwidth control, NLC in step 3 is what I would use (or if you use http as a protocol, Charles also can do this).</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Firewall.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Firewall.png" width="374" height="214 " /></a></p>

<p>Click &quot;Start PF&quot; and you are good to go. Hit &quot;Apply&quot; every time you change any setting. To see if limit works for me, I usually go to <a href="http://speedtest.net">http://speedtest.net</a>.</p>

<p>We can continue using Charles for debugging</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fragments. Retaining state and objects.]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/09/14/Fragments-Retaining-state-and-objects/"/>
    <updated>2014-09-14T23:04:06+03:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/09/14/Fragments-Retaining-state-and-objects</id>
    <content type="html"><![CDATA[<p>There is a lot of good stuff written already about Activity and Fragment lifecycle and how to manage state and object retaining properly. So following is just a recap for future myself, rather than a tutorial.</p>

<p>Let&#39;s take a look at <strong>Activities</strong> and their destiny. There are 3 cases when and how activity can be destroyed.</p>

<!-- more -->

<p><strong>First case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, and then navigates back to <em>A</em>. Android won&#39;t save any instance state of activity <em>B</em> because user won&#39;t need this particular instance anymore. When he comes again to <em>B</em> he will get a fresh instance.</p>

<p><strong>Second case</strong>: User enters activity <em>A</em> and rotates screen (or other configuration change occurs). Android has to recreate activity, so first it calls <code>onSaveInstanceState(Bundle outState)</code>, destroys <em>A</em> and creates new instance, then calls <code>onRestoreInstanceState(Bundle savedInstanceState)</code> to restore state of views (the same can be done in <code>onCreate(Bundle savedInstanceState)</code>).</p>

<p><strong>Third case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, <em>C</em>, <em>D</em>â€¦ up the activity stack. At some point Android kills <em>A</em> to reclaim memory (or because you turned on useful feature <em>Developer options -&gt; Don&#39;t keep activities</em>). Because user may eventually come back to <em>A</em>, system saves <em>A</em>&#39;s state before killing and later recreates it with <code>savedInstanceState</code>.  </p>

<hr>

<p><br>
<strong>Fragment</strong> is tightly coupled to activity&#39;s lifecycle. It also has methods <code>onSaveInstanceState()</code>, <del>onRestoreInstanceState()</del> you can do restore in <code>onActivityCreated()</code> or <code>onViewStateRestored()</code>.</p>

<p>This is how I usually create fragment. Why prefer static factory method, see for example <a href="http://www.androiddesignpatterns.com/2012/05/using-newinstance-to-instantiate.html">here</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="s">&quot;index&quot;</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Whatever we pass in arguments bundle also gets saved in case fragment has to be recreated later. Great! Now, let&#39;s say we have to pass an object to a fragment which is non-serializable. We can&#39;t put it in bundle, so my first thought would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// non-serializable object</span>
</span><span class='line'>      <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletApplication</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">().</span><span class="na">getApplication</span><span class="o">()).</span><span class="na">getWallet</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I think this get.get.get and a cast could <a href="http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/">look better</a>. Ideally, we should not &quot;talk to strangers&quot;, so we could use some DI here (read more on DI forms in <a href="http://www.martinfowler.com/articles/injection.html#FormsOfDependencyInjection">Martin Fowler&#39;s article</a>):  </p>

<ul>
<li>Constructor injection</li>
<li>Setter injection</li>
<li>Interface injection</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">setWallet</span><span class="o">(</span><span class="n">wallet</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">/// index goes into args </span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now any activity knows, that in order to construct this fragment it&#39;d have to provide a Wallet dependency.</p>

<p>Run the code, rotate the device and get <em>NPE</em>. This is our <strong>second case</strong>: Activity is recreated, so is fragment by calling no-arg constructor together with the same bundle that was passed to <code>setArguments</code> last time. Instance fields of course lost, <code>wallet</code> is null. <a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#RetainingAnObject">Android doc</a> helps us solve this by adding <code>setRetainInstance(true)</code>. Rotating works fine now, fragment instance is saved in memory and not recreated.</p>

<p>When we get to <strong>third case</strong>, there is no retaining like with configuration change. So we end up with restrictions, that default constructor has to have no arguments - <code>new Fragment()</code>, and static factory method <code>newInstance(Dependency)</code>, where we could pass a parameter, won&#39;t be called at the recreation time.</p>

<p>We can code following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">FragmentActivity</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">WalletProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">â€¦</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Wallet</span> <span class="nf">provideWallet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="err">â€¦</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionsFragment</span> <span class="kd">extends</span> <span class="n">ListFragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onActivityCreated</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// get Wallet dependency</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletProvider</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">()).</span><span class="na">provideWallet</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassCastException</span><span class="o">(</span><span class="n">getActivity</span><span class="o">().</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>                                       <span class="s">&quot; should implement WalletProvider interface&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Why do I put this in <code>onActivityCreated()</code>, rather than <code>onCreate()</code>? Because fragment&#39;s <code>onCreate()</code> is not guaranteed to be called <strong>after</strong> activity&#39;s <code>onCreate()</code> and our dependency might not yet be initialized in activity.</p>

<hr>

<p><br>
<code>setRetainInstance(true)</code> has also couple of features you should keep in mind.</p>

<ul>
<li><p><code>Bundle savedInstanceState</code> is always null. This kinda makes sense, why would you want to restore state if fragment is not destroyed?</p></li>
<li><p>Fragment&#39;s lifecycle becomes slightly different, i.e. <code>onCreate()</code> and <code>onDestroy()</code> won&#39;t be called:</p></li>
</ul>

<p><a href="http://oleksandr-yefremov.github.io/images/fragment-lifecycle-setRetainInstance_horiz.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/fragment-lifecycle-setRetainInstance_horiz.png" width="1213" height="162" /></a></p>

<p>In my case I had <code>wallet.addEventListener(txEventListener)</code> in <code>onCreate()</code> and <code>wallet.removeEventListener(txEventListener)</code> in <code>onDestroy()</code>. It was perfect, since these are not called on config change with retained instance and I wasn&#39;t removing-adding the same listener. However, if I add listener in <code>onActivityCreated()</code> to be sure that activity is fully created, I have to remove it in <code>onDestroyView()</code>.</p>
]]></content>
  </entry>
  
</feed>
