<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yet Another Dev Blog]]></title>
  <link href="http://oleksandr-yefremov.github.io/atom.xml" rel="self"/>
  <link href="http://oleksandr-yefremov.github.io/"/>
  <updated>2015-12-14T22:27:06+02:00</updated>
  <id>http://oleksandr-yefremov.github.io/</id>
  <author>
    <name><![CDATA[Oleksandr Yefremov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS applications architecture with VIPER]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2015/12/14/iOS-applications-architecture-with-VIPER/"/>
    <updated>2015-12-14T17:40:53+02:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2015/12/14/iOS-applications-architecture-with-VIPER</id>
    <content type="html"><![CDATA[<p>Recently I gave the talk about VIPER arhitecture for iOS applications at a local meetup. 
Slides are available <a href="http://oleksandr-yefremov.github.io/VIPER-slides/">here</a> and blog post will follow soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scheduling repetitive task on Android]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/11/01/Scheduling-repetitive-task-on-Android/"/>
    <updated>2014-11-01T10:40:53+02:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/11/01/Scheduling-repetitive-task-on-Android</id>
    <content type="html"><![CDATA[<script src="http://oleksandr-yefremov.github.io/javascripts/expand-collapse.js" type="text/javascript"></script>

<p>There is a task that needs to be repeated every <em>N</em> seconds. Might be even an interview question to see what options person would consider. With no other requirements or restrictions given, here is what pops up in my mind:</p>

<!-- more -->

<style>
.expand-container .expander.expanded {
    padding-left: 13px;
    background-position: left center;
    background-repeat: no-repeat;
    background-image: url(/images/expanded.gif);
}        
        
.expand-container .expander.collapsed {
    padding-left: 13px;
    background-position: left center;
    background-repeat: no-repeat;
    background-image: url(/images/collapsed.gif);
}        
</style>

<p>As a task example I </p>

<p><strong>1. Service with Handler</strong>  </p>

<div class="expand-container">
<a class="expander" href="#">Expand source code</a>
<div class="expandable-content">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyManagerService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CurrencyManagerService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">5</span><span class="o">;</span> <span class="c1">// seconds</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span> <span class="c1">// seconds</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFS_KEY_CURRENCY_RATES</span> <span class="o">=</span> <span class="s">&quot;.currencyRates&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Handler</span> <span class="n">handler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>      <span class="n">HandlerThread</span> <span class="n">fetchThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="s">&quot;fetchThread&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">fetchThread</span><span class="o">.</span><span class="na">setPriority</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">MIN_PRIORITY</span><span class="o">);</span>
</span><span class='line'>      <span class="n">fetchThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">fetchThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Service started.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// firstly, check if there is sticky event available already</span>
</span><span class='line'>      <span class="c1">// (service may be restarted by system occasionally)</span>
</span><span class='line'>      <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getStickyEvent</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// then check if we have it stored in SharedPreferences</span>
</span><span class='line'>          <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">())</span>
</span><span class='line'>                                                  <span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// app fresh start, go fetch rates now</span>
</span><span class='line'>              <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">fetchCurrencyRatesRunnable</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// found in SharedPreferences; post event and schedule fetch meanwhile to update cache</span>
</span><span class='line'>              <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>              <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">fetchCurrencyRatesRunnable</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// sticky event is there, schedule next fetch</span>
</span><span class='line'>          <span class="n">handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">fetchCurrencyRatesRunnable</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">START_STICKY</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Runnable</span> <span class="n">fetchCurrencyRatesRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Fetching CurrencyRate…&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&quot;http://yourendpoint.com:8080&quot;</span><span class="o">)</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>          <span class="n">CurrencyRatesRestService</span> <span class="n">restService</span> <span class="o">=</span> <span class="n">restAdapter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">CurrencyRatesRestService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="n">restService</span><span class="o">.</span><span class="na">getRate</span><span class="o">(</span><span class="s">&quot;USD&quot;</span><span class="o">,</span> <span class="n">currencyRatesRequestCallback</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;</span> <span class="n">currencyRatesRequestCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span> <span class="n">currencyRate</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span> <span class="c1">// set error timeout to default value</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">currencyRate</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CurrencyRateResponse</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">(),</span> <span class="n">currencyRate</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">())</span>
</span><span class='line'>                           <span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>          <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>          <span class="n">handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">fetchCurrencyRatesRunnable</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">failure</span><span class="o">(</span><span class="n">RetrofitError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error while fetching currency rates.&quot;</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// schedule next fetch with some backoff delay</span>
</span><span class='line'>          <span class="n">handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">fetchCurrencyRatesRunnable</span><span class="o">,</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Nullable</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// we don&#39;t allow binding to this service, since it doesn&#39;t make much sense</span>
</span><span class='line'>      <span class="c1">// (i.e. other components don&#39;t need to send messages to service)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p></div></div></p>

<div class="expand-container">
<a class="expander" href="#">Memory footprint</a>
<div class="expandable-content">

<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/1.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/1.png" /></a>
<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/1e.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/1e.png" /></a>

</div></div>
    

<p><strong>2. TimerTask</strong><br>
Android doc for <a href="http://developer.android.com/reference/java/util/Timer.html">TimerTask</a> says &quot;Prefer <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html"><code>ScheduledThreadPoolExecutor</code></a> for new code.&quot; </p>

<div class="expandable-container">  
<a class="expander" href="#">Expand source code</a>
<div class="expandable-content">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyManagerTimer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CurrencyManagerTimer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">5</span><span class="o">;</span> <span class="c1">// seconds</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFS_KEY_CURRENCY_RATES</span> <span class="o">=</span> <span class="s">&quot;.currencyRates&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Timer</span> <span class="n">timer</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TimerTask</span> <span class="n">timerTask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">CurrencyManagerTimer</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>      <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="o">(</span><span class="s">&quot;fetchTimer&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">timerTask</span> <span class="o">=</span> <span class="n">createTimerTask</span><span class="o">();</span>
</span><span class='line'>      <span class="n">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TimerTask</span> <span class="nf">createTimerTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">TimerTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Fetching CurrencyRate…&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                                                <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&quot;http://localhost:8080&quot;</span><span class="o">)</span>
</span><span class='line'>                                                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>              <span class="n">CurrencyRatesRestService</span> <span class="n">restService</span> <span class="o">=</span> <span class="n">restAdapter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">CurrencyRatesRestService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="n">restService</span><span class="o">.</span><span class="na">getRate</span><span class="o">(</span><span class="s">&quot;USD&quot;</span><span class="o">,</span> <span class="n">currencyRatesRequestCallback</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;</span> <span class="n">currencyRatesRequestCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span> <span class="n">currencyRate</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span> <span class="c1">// set error timeout to default</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">currencyRate</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CurrencyRateResponse</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">(),</span> <span class="n">currencyRate</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                           <span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>          <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">failure</span><span class="o">(</span><span class="n">RetrofitError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error while fetching currency rates.&quot;</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// schedule next fetch with some backoff delay</span>
</span><span class='line'>          <span class="n">timerTask</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>          <span class="n">timerTask</span> <span class="o">=</span> <span class="n">createTimerTask</span><span class="o">();</span>
</span><span class='line'>          <span class="n">timer</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">timerTask</span><span class="o">,</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Manager started.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// firstly, check if there is sticky event available already</span>
</span><span class='line'>      <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getStickyEvent</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// then check if we have it stored in SharedPreferences</span>
</span><span class='line'>          <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                                                  <span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// app fresh start, go fetch rates now</span>
</span><span class='line'>              <span class="n">timer</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">timerTask</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// found in SharedPreferences; post event and schedule fetch meanwhile to update cache</span>
</span><span class='line'>              <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>              <span class="n">timer</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">timerTask</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// sticky event is there, schedule next fetch</span>
</span><span class='line'>          <span class="n">timer</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">timerTask</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p></div></div></p>

<div class="expand-container">
<a class="expander" href="#">Memory footprint</a>
<div class="expandable-content">

<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/2.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/2.png" /></a>
<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/2e.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/2e.png" /></a>

</div></div>

<p><strong>3. ScheduledThreadPoolExecutor</strong></p>

<div class="expand-container">
<a class="expander" href="#">Expand source code</a>
<div class="expandable-content">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyManagerScheduledExecutor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CurrencyManagerScheduledExecutor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">5</span><span class="o">;</span> <span class="c1">// seconds</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFS_KEY_CURRENCY_RATES</span> <span class="o">=</span> <span class="s">&quot;.currencyRates&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ScheduledFuture</span><span class="o">&lt;?&gt;</span> <span class="n">fetchFuture</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">ScheduledThreadPoolExecutor</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">CurrencyManagerScheduledExecutor</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>      <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScheduledThreadPoolExecutor</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Runnable</span> <span class="n">fetchRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Fetching CurrencyRate…&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&quot;http://localhost:8080&quot;</span><span class="o">)</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>          <span class="n">CurrencyRatesRestService</span> <span class="n">restService</span> <span class="o">=</span> <span class="n">restAdapter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">CurrencyRatesRestService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="n">restService</span><span class="o">.</span><span class="na">getRate</span><span class="o">(</span><span class="s">&quot;USD&quot;</span><span class="o">,</span> <span class="n">currencyRatesRequestCallback</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;</span> <span class="n">currencyRatesRequestCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span> <span class="n">currencyRate</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span> <span class="c1">// default error timeout</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">currencyRate</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CurrencyRateResponse</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">(),</span> <span class="n">currencyRate</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                           <span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>          <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">failure</span><span class="o">(</span><span class="n">RetrofitError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error while fetching currency rates.&quot;</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// cancel all subsequent fixed-rate tasks because of an error</span>
</span><span class='line'>          <span class="n">fetchFuture</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// schedule next fetch with some backoff delay.</span>
</span><span class='line'>          <span class="c1">// if error disappears, tasks will be fixed-rate again with &quot;period&quot; parameter</span>
</span><span class='line'>          <span class="n">fetchFuture</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">fetchRunnable</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">,</span>    <span class="c1">// backoff delay</span>
</span><span class='line'>                                                     <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>  <span class="c1">// period</span>
</span><span class='line'>                                                     <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Manager started.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// First, check if there is sticky event available already</span>
</span><span class='line'>      <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getStickyEvent</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// then check if we have it stored in SharedPreferences</span>
</span><span class='line'>          <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                                                  <span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// app fresh start, go fetch rates now</span>
</span><span class='line'>              <span class="n">fetchFuture</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">fetchRunnable</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// found in SharedPreferences; post event and schedule fetch meanwhile to update cache</span>
</span><span class='line'>              <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>              <span class="n">fetchFuture</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">fetchRunnable</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// sticky event is there, schedule next fetch</span>
</span><span class='line'>          <span class="n">fetchFuture</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">fetchRunnable</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p></div></div></p>

<div class="expand-container">
<a class="expander" href="#">Memory footprint</a>
<div class="expandable-content">

<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/3.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/3.png" /></a>
<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/3e.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/3e.png" /></a>

</div></div>

<p><strong>4. AlarmManager</strong>
From the <a href="http://developer.android.com/reference/android/app/AlarmManager.html">AlarmManager</a> doc:<br>
Note: The Alarm Manager is intended for cases where you want to have your application code run at a specific time, even if your application is not currently running. For normal timing operations (ticks, timeouts, etc) it is easier and much more efficient to use Handler.</p>

<div class="expand-container">
<a class="expander" href="#">Expand source code</a>
<div class="expandable-content">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyManagerAlarm</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CurrencyManagerAlarm</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">5</span><span class="o">;</span> <span class="c1">// seconds</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFS_KEY_CURRENCY_RATES</span> <span class="o">=</span> <span class="s">&quot;.currencyRates&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">intentFilter</span> <span class="o">=</span> <span class="s">&quot;.managers.sendSchedule&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">PendingIntent</span> <span class="n">pendingIntent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">AlarmManager</span> <span class="n">alarmManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">CurrencyManagerAlarm</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>      <span class="n">alarmManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">AlarmManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ALARM_SERVICE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">alarmIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">intentFilter</span><span class="o">);</span>
</span><span class='line'>      <span class="n">pendingIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getBroadcast</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">alarmIntent</span><span class="o">,</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">FLAG_UPDATE_CURRENT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">FetchCommandReceiver</span> <span class="n">fetchCommandReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FetchCommandReceiver</span><span class="o">();</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">registerReceiver</span><span class="o">(</span><span class="n">fetchCommandReceiver</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IntentFilter</span><span class="o">(</span><span class="n">intentFilter</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Runnable</span> <span class="n">fetchRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Fetching CurrencyRate…&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&quot;http://localhost:8080&quot;</span><span class="o">)</span>
</span><span class='line'>                                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>          <span class="n">CurrencyRatesRestService</span> <span class="n">restService</span> <span class="o">=</span> <span class="n">restAdapter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">CurrencyRatesRestService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="n">restService</span><span class="o">.</span><span class="na">getRate</span><span class="o">(</span><span class="s">&quot;USD&quot;</span><span class="o">,</span> <span class="n">currencyRatesRequestCallback</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;</span> <span class="n">currencyRatesRequestCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">CurrencyRate</span> <span class="n">currencyRate</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">=</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">;</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">currencyRate</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CurrencyRateResponse</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">(),</span> <span class="n">currencyRate</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                           <span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>          <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">failure</span><span class="o">(</span><span class="n">RetrofitError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error while fetching currency rates.&quot;</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Cancel all subsequent fixed-rate tasks because of an error.</span>
</span><span class='line'>          <span class="c1">// Schedule next fetch with some backoff delay.</span>
</span><span class='line'>          <span class="c1">// If error disappears, tasks will be fixed-rate again with &quot;period&quot; parameter</span>
</span><span class='line'>          <span class="n">alarmManager</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTimeInMillis</span><span class="o">();</span>
</span><span class='line'>          <span class="n">alarmManager</span><span class="o">.</span><span class="na">setInexactRepeating</span><span class="o">(</span><span class="n">AlarmManager</span><span class="o">.</span><span class="na">RTC</span><span class="o">,</span>
</span><span class='line'>                                           <span class="n">now</span> <span class="o">+</span> <span class="o">(</span><span class="n">ERROR_BACKOFF_TIMEOUT</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">),</span>
</span><span class='line'>                                           <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                           <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Manager started.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTimeInMillis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// firstly, check if there is sticky event available already</span>
</span><span class='line'>      <span class="c1">// (service may be restarted by system occasionally)</span>
</span><span class='line'>      <span class="n">CurrencyRateResponse</span> <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getStickyEvent</span><span class="o">(</span><span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// then check if we have it stored in SharedPreferences</span>
</span><span class='line'>          <span class="n">currencyRateResponse</span> <span class="o">=</span> <span class="n">PreferencesToGson</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>                                                  <span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">PREFS_KEY_CURRENCY_RATES</span><span class="o">,</span> <span class="n">CurrencyRateResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">currencyRateResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// app fresh start, go fetch rates now</span>
</span><span class='line'>              <span class="n">alarmManager</span><span class="o">.</span><span class="na">setRepeating</span><span class="o">(</span><span class="n">AlarmManager</span><span class="o">.</span><span class="na">RTC</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">now</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// found in SharedPreferences; post event and schedule fetch meanwhile to update cache</span>
</span><span class='line'>              <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">postSticky</span><span class="o">(</span><span class="n">currencyRateResponse</span><span class="o">);</span>
</span><span class='line'>              <span class="n">alarmManager</span><span class="o">.</span><span class="na">setRepeating</span><span class="o">(</span><span class="n">AlarmManager</span><span class="o">.</span><span class="na">RTC</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">now</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// sticky event is there, schedule next fetch</span>
</span><span class='line'>          <span class="n">alarmManager</span><span class="o">.</span><span class="na">setRepeating</span><span class="o">(</span><span class="n">AlarmManager</span><span class="o">.</span><span class="na">RTC</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">now</span> <span class="o">+</span> <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">TIMEOUT_FETCH_CURRENCY_RATES</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">FetchCommandReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">fetchRunnable</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p></div></div></p>

<div class="expand-container">
<a class="expander" href="#">Memory footprint</a>
<div class="expandable-content">

<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/4.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexus5_device/4.png" /></a>
<a href="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/4e.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/scheduling_task/nexusS_genymotion/4e.png" /></a>

</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throttling bandwidth for Android app on physical device]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/10/08/Throttling-bandwidth-on-Android-device/"/>
    <updated>2014-10-08T14:41:15+03:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/10/08/Throttling-bandwidth-on-Android-device</id>
    <content type="html"><![CDATA[<p>The other day I needed to throttle (limit bandwidth) of video streaming application on Android for testing purposes. iPhone has this feature built in since iOS6.</p>

<!-- more -->

<p>As I use Mac OS, I will list instructions for it. Options that I considered:</p>

<p><strong>1. Use <code>emulator -netspeed gsm</code></strong><br>
    I need to be able to do the same thing on real device as well, so strike off.</p>

<p><strong>2. Root phone, install or hack your own <a href="https://play.google.com/store/apps/details?id=com.oxplot.bradybound&amp;hl=en">application</a> which will limit bandwidth (or play with <a href="http://stackoverflow.com/questions/4658619/how-to-use-iptables-in-an-android-application">iptables</a>)</strong><br>
    Not an option, cause I need clean stock firmware on device.</p>

<p><strong>3. Throttle bandwidth on WiFi router, if it supports such a feature.</strong><br>
    And everybody connected to the same router will suffer. Besides, with some models you&#39;d need to restart router every time you want to turn on/off throttling.</p>

<p><strong>3. If you have laptop (or desktop with WiFi interface), connect to network via Ethernet, setup Internet Sharing from Ethernet to WiFi, connect device to shared WiFi and use <a href="http://nshipster.com/network-link-conditioner/">Network Link Conditioner</a> on Mac or similar software which is easy and straightforward but can only limit all connections together.</strong><br>
    This is the easiest way, if you don&#39;t mind all your connections on both laptop and smartphone slowed down. <strong>NLC</strong> also able to simulate packet drops and latency.</p>

<p><strong>4. Charles proxy</strong><br>
Lets you throttle specific host accessed with HTTP(S). You can also set breakpoints on everything.
Keep in mind that free version shows &quot;waiting popups&quot; occasionally and restarts every 30 minutes.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/Charles proxy throttling.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/Charles proxy throttling.png" width="267" height="250 " /></a></p>

<p>Since I might need to use RTP (or smth not HTTP) in future, let&#39;s take one more step.</p>

<p><strong>5. IceFloor or managing system firewall</strong><br>
&quot;<a href="http://www.hanynet.com/icefloor/">IceFloor</a> is a graphic frontend for <a href="http://en.wikipedia.org/wiki/PF_%28firewall%29">PF</a>&quot;.</p>

<p>First we go through step 3 above: connect Ethernet, turn on Internet Sharing, connect our device to shared WiFi. Make sure it works, browse some page or stream video from your app. 
In <strong>IceFloor</strong> navigate to <em>Interfaces</em> tab, click <code>Update</code> button and locate Ethernet and bridge interfaces. In my case it was <code>en0</code>, <code>bridge100</code>.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Interfaces.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Interfaces.png" width="374" height="214 " /></a></p>

<p>Now to <em>NAT</em> tab, check &quot;Share internet connection&quot; and select interfaces that you located on previous screen.</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor NAT.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor NAT.png" width="374" height="214 " /></a></p>

<p>Last step, <em>Firewall</em> tab, select &quot;Outbound (NAT clients)&quot; list, add required protocols to &quot;Services in selected Address Group&quot; (I just added &quot;All services&quot;). And here is the thing we&#39;ve been chasing - Max. Bandwidth. Note, that we can&#39;t specify packet drop rate or latency here. If you need those as well as bandwidth control, <strong>NLC</strong> in step 3 is what I would use (or if you use HTTP as a protocol, <strong>Charles</strong> also can do this).</p>

<p><a href="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Firewall.png"><img class="caption" style="background-color:white;" src="http://oleksandr-yefremov.github.io/images/throttling/IceFloor Firewall.png" width="374" height="214 " /></a></p>

<p>Click &quot;Start PF&quot; and you are good to go. Hit &quot;Apply&quot; every time you change any setting. To see if limit works for me, I usually go to <a href="http://speedtest.net">http://speedtest.net</a>.</p>

<p>And we can continue using <strong>Charles</strong> for debugging with <strong>IceFloor</strong> turned on.</p>

<p>P.S. Also I just noticed, that Internet Sharing allows me to see <a href="http://octopress.org/docs/blogging/">preview</a> of Octopress post on mobile device as well as in desktop browser before I actually deploy it ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fragments. Retaining state and objects.]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/09/14/Fragments-Retaining-state-and-objects/"/>
    <updated>2014-09-14T23:04:06+03:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/09/14/Fragments-Retaining-state-and-objects</id>
    <content type="html"><![CDATA[<p>There is a lot of good stuff written already about Activity and Fragment lifecycle and how to manage state and object retaining properly. So following is just a recap for future myself, rather than a tutorial.</p>

<p>Let&#39;s take a look at <strong>Activities</strong> and their destiny. There are 3 cases when and how activity can be destroyed.</p>

<!-- more -->

<p><strong>First case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, and then navigates back to <em>A</em>. Android won&#39;t save any instance state of activity <em>B</em> because user won&#39;t need this particular instance anymore. When he comes again to <em>B</em> he will get a fresh instance.</p>

<p><strong>Second case</strong>: User enters activity <em>A</em> and rotates screen (or other configuration change occurs). Android has to recreate activity, so first it calls <code>onSaveInstanceState(Bundle outState)</code>, destroys <em>A</em> and creates new instance, then calls <code>onRestoreInstanceState(Bundle savedInstanceState)</code> to restore state of views (the same can be done in <code>onCreate(Bundle savedInstanceState)</code>).</p>

<p><strong>Third case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, <em>C</em>, <em>D</em>… up the activity stack. At some point Android kills <em>A</em> to reclaim memory (or because you turned on useful feature <em>Developer options -&gt; Don&#39;t keep activities</em>). Because user may eventually come back to <em>A</em>, system saves <em>A</em>&#39;s state before killing and later recreates it with <code>savedInstanceState</code>.  </p>

<hr>

<p><br>
<strong>Fragment</strong> is tightly coupled to activity&#39;s lifecycle. It also has methods <code>onSaveInstanceState()</code>, <del>onRestoreInstanceState()</del> you can do restore in <code>onActivityCreated()</code> or <code>onViewStateRestored()</code>.</p>

<p>This is how I usually create fragment. Why prefer static factory method, see for example <a href="http://www.androiddesignpatterns.com/2012/05/using-newinstance-to-instantiate.html">here</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="s">&quot;index&quot;</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Whatever we pass in arguments bundle also gets saved in case fragment has to be recreated later. Great! Now, let&#39;s say we have to pass an object to a fragment which is non-serializable. We can&#39;t put it in bundle, so my first thought would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// non-serializable object</span>
</span><span class='line'>      <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletApplication</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">().</span><span class="na">getApplication</span><span class="o">()).</span><span class="na">getWallet</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I think this get.get.get and a cast could <a href="http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/">look better</a>. Ideally, we should not &quot;talk to strangers&quot;, so we could use some DI here (read more on DI forms in <a href="http://www.martinfowler.com/articles/injection.html#FormsOfDependencyInjection">Martin Fowler&#39;s article</a>):  </p>

<ul>
<li>Constructor injection</li>
<li>Setter injection</li>
<li>Interface injection</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">setWallet</span><span class="o">(</span><span class="n">wallet</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">/// index goes into args </span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now any activity knows, that in order to construct this fragment it&#39;d have to provide a Wallet dependency.</p>

<p>Run the code, rotate the device and get <em>NPE</em>. This is our <strong>second case</strong>: Activity is recreated, so is fragment by calling no-arg constructor together with the same bundle that was passed to <code>setArguments</code> last time. Instance fields of course lost, <code>wallet</code> is null. <a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#RetainingAnObject">Android doc</a> helps us solve this by adding <code>setRetainInstance(true)</code>. Rotating works fine now, fragment instance is saved in memory and not recreated.</p>

<p>When we get to <strong>third case</strong>, there is no retaining like with configuration change. So we end up with restrictions, that default constructor has to have no arguments - <code>new Fragment()</code>, and static factory method <code>newInstance(Dependency)</code>, where we could pass a parameter, won&#39;t be called at the recreation time.</p>

<p>We can code following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">FragmentActivity</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">WalletProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Wallet</span> <span class="nf">provideWallet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionsFragment</span> <span class="kd">extends</span> <span class="n">ListFragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onActivityCreated</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// get Wallet dependency</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletProvider</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">()).</span><span class="na">provideWallet</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassCastException</span><span class="o">(</span><span class="n">getActivity</span><span class="o">().</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>                                       <span class="s">&quot; should implement WalletProvider interface&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Why do I put this in <code>onActivityCreated()</code>, rather than <code>onCreate()</code>? Because fragment&#39;s <code>onCreate()</code> is not guaranteed to be called <strong>after</strong> activity&#39;s <code>onCreate()</code> and our dependency might not yet be initialized in activity.</p>

<hr>

<p><br>
<code>setRetainInstance(true)</code> has also couple of features you should keep in mind.</p>

<ul>
<li><p><code>Bundle savedInstanceState</code> is always null. This kinda makes sense, why would you want to restore state if fragment is not destroyed?</p></li>
<li><p>Fragment&#39;s lifecycle becomes slightly different, i.e. <code>onCreate()</code> and <code>onDestroy()</code> won&#39;t be called:</p></li>
</ul>

<p><a href="http://oleksandr-yefremov.github.io/images/fragment-lifecycle-setRetainInstance_horiz.png"><img class="caption" src="http://oleksandr-yefremov.github.io/images/fragment-lifecycle-setRetainInstance_horiz.png" width="1213" height="162" /></a></p>

<p>In my case I had <code>wallet.addEventListener(txEventListener)</code> in <code>onCreate()</code> and <code>wallet.removeEventListener(txEventListener)</code> in <code>onDestroy()</code>. It was perfect, since these are not called on config change with retained instance and I wasn&#39;t removing-adding the same listener. However, if I add listener in <code>onActivityCreated()</code> to be sure that activity is fully created, I have to remove it in <code>onDestroyView()</code>.</p>
]]></content>
  </entry>
  
</feed>
