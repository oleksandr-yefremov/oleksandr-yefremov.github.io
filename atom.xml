<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yet Another Android Blog]]></title>
  <link href="http://oleksandr-yefremov.github.io/atom.xml" rel="self"/>
  <link href="http://oleksandr-yefremov.github.io/"/>
  <updated>2014-09-19T11:56:39+03:00</updated>
  <id>http://oleksandr-yefremov.github.io/</id>
  <author>
    <name><![CDATA[Oleksandr Yefremov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fragment FTW!]]></title>
    <link href="http://oleksandr-yefremov.github.io/blog/2014/09/14/draft-fragment/"/>
    <updated>2014-09-14T23:04:06+03:00</updated>
    <id>http://oleksandr-yefremov.github.io/blog/2014/09/14/draft-fragment</id>
    <content type="html"><![CDATA[<p>There is a lot of stuff written already about Activity and Fragment lifecycle and how to manage state and object retaining properly. So this is just a recap for future myself, rather than a tutorial.</p>

<p>Let&#39;s take a look at <strong>Activities</strong> and their destiny. There are 3 cases when and how activity can be destroyed.</p>

<!-- more -->

<p><strong>First case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, and then navigates back to <em>A</em>. Android won&#39;t save any instance state of activity <em>B</em> because user won&#39;t need this particular instance anymore. When he comes again to <em>B</em> he will get a fresh instance.</p>

<p><strong>Second case</strong>: User enters activity <em>A</em> and rotates screen (or other configuration change occurs). Android has to recreate activity, so first it calls <code>onSaveInstanceState(Bundle outState)</code>, destroys <em>A</em> and creates new instance, then calls <code>onRestoreInstanceState(Bundle savedInstanceState)</code> to restore state of views (the same can be done in <code>onCreate(Bundle savedInstanceState)</code>).</p>

<p><strong>Third case</strong>: User enters activity <em>A</em>, from there goes to <em>B</em>, <em>C</em>, <em>D</em>â€¦ up the activity stack. At some point Android kills <em>A</em> to reclaim memory (or because you turned on useful feature <em>Developer options -&gt; Don&#39;t keep activities</em>). Because user may eventually come back to <em>A</em>, system saves <em>A</em>&#39;s state before killing and later recreates it with <code>savedInstanceState</code>.  </p>

<hr>

<p><br>
<strong>Fragment</strong> is tightly coupled to activity&#39;s lifecycle. It also has methods <code>onSaveInstanceState()</code>, <code>onRestoreInstanceState()</code> and knows how to save its internal state.</p>

<p>This is how to create a fragment. It is common to put this code into static factory method (see why for example <a href="http://www.androiddesignpatterns.com/2012/05/using-newinstance-to-instantiate.html">here</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="s">&quot;index&quot;</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Whatever we pass in arguments bundle, gets saved if fragment has to be recreated later. Now let&#39;s say we have a clear dependency in our fragment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// non-serializable object</span>
</span><span class='line'>      <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletApplication</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">().</span><span class="na">getApplication</span><span class="o">()).</span><span class="na">getWallet</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Personally, I think this get.get.get and a cast is rather ugly. Ideally, we should have no knowledge about parent activity, so we gonna use some DI magic (read more on DI forms <a href="http://www.martinfowler.com/articles/injection.html#FormsOfDependencyInjection">in Martin Fowler&#39;s article</a>:  </p>

<ul>
<li>Constructor injection</li>
<li>Setter injection</li>
<li>Interface injection</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">MyFragment</span> <span class="nf">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MyFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFragment</span><span class="o">();</span>
</span><span class='line'>  <span class="n">fragment</span><span class="o">.</span><span class="na">wallet</span> <span class="o">=</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">/// index goes into args </span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fragment</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now any activity knows, that in order to construct this fragment it&#39;d have to provide a Wallet dependency to it.</p>

<p>Run the code, rotate the device and get <em>NPE</em>. This is <strong>second case</strong> from above: Activity is recreated, so is fragment by calling no-arg constructor together with the same bundle that was passed to <code>setArguments</code> last time. Instance fields of course lost, <code>wallet</code> is null. <a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#RetainingAnObject">Android doc</a> helps us solve this by adding <code>setRetainInstance(true)</code>. Rotating works fine now, fragment instance is saved in memory and not recreated.</p>

<p>Speaking about <strong>third case</strong>, there is no retaining like with configuration change. So we end up with restrictions, that default constructor has to have no arguments - <code>new Fragment()</code>, and static factory method <code>newInstance(Dependency)</code>, where we could pass a parameter, won&#39;t be called at the recreation time.</p>

<p>We can code following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">FragmentActivity</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">WalletProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">â€¦</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Wallet</span> <span class="nf">provideWallet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="err">â€¦</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionsFragment</span> <span class="kd">extends</span> <span class="n">ListFragment</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Wallet</span> <span class="n">wallet</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onActivityCreated</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// get Wallet dependency</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">wallet</span> <span class="o">=</span> <span class="o">((</span><span class="n">WalletProvider</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">()).</span><span class="na">provideWallet</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassCastException</span><span class="o">(</span><span class="n">getActivity</span><span class="o">().</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>                                       <span class="s">&quot; should implement WalletProvider interface&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<div style="float: right;"><img class="caption" src="http://oleksandr-yefremov.github.io/images/fragment-lifecycle-setRetainInstance.png" width="317" height="847" title="test caption"></img></div>

<p>Why do I put this in <code>onActivityCreated()</code>, rather than <code>onCreate()</code>? We know, that fragment lifecycle looks a little bit different with <code>setRetainInstance(true)</code>:  </p>

<p>If we use <code>setRetainInstance(true)</code>, we could put this code into <code>onCreate()</code> so 
Be sure to <strong>not</strong> move this code code into <code>onCreate()</code>, because fragment&#39;s <code>onCreate</code> is not guaranteed to be called <strong>after</strong> activity&#39;s and this can cause you some <em>&quot;Debugging Time, come on grab your friends&quot;</em>.</p>

<p>Now every time activity is recreated</p>
]]></content>
  </entry>
  
</feed>
